/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.kigawa.keruta.executor.client.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import net.kigawa.keruta.executor.client.model.Repository
import net.kigawa.keruta.executor.client.model.RepositoryCreateRequest

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import net.kigawa.keruta.executor.client.infrastructure.ApiClient
import net.kigawa.keruta.executor.client.infrastructure.ApiResponse
import net.kigawa.keruta.executor.client.infrastructure.ClientException
import net.kigawa.keruta.executor.client.infrastructure.ClientError
import net.kigawa.keruta.executor.client.infrastructure.ServerException
import net.kigawa.keruta.executor.client.infrastructure.ServerError
import net.kigawa.keruta.executor.client.infrastructure.MultiValueMap
import net.kigawa.keruta.executor.client.infrastructure.PartConfig
import net.kigawa.keruta.executor.client.infrastructure.RequestConfig
import net.kigawa.keruta.executor.client.infrastructure.RequestMethod
import net.kigawa.keruta.executor.client.infrastructure.ResponseType
import net.kigawa.keruta.executor.client.infrastructure.Success
import net.kigawa.keruta.executor.client.infrastructure.toMultiValue

class RepositoryManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * Create repository
     * Creates a new repository
     * @param repositoryCreateRequest 
     * @return Repository
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createRepository(repositoryCreateRequest: RepositoryCreateRequest) : Repository = withContext(Dispatchers.IO) {
        val localVarResponse = createRepositoryWithHttpInfo(repositoryCreateRequest = repositoryCreateRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Repository
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create repository
     * Creates a new repository
     * @param repositoryCreateRequest 
     * @return ApiResponse<Repository?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createRepositoryWithHttpInfo(repositoryCreateRequest: RepositoryCreateRequest) : ApiResponse<Repository?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createRepositoryRequestConfig(repositoryCreateRequest = repositoryCreateRequest)

        return@withContext request<RepositoryCreateRequest, Repository>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createRepository
     *
     * @param repositoryCreateRequest 
     * @return RequestConfig
     */
    fun createRepositoryRequestConfig(repositoryCreateRequest: RepositoryCreateRequest) : RequestConfig<RepositoryCreateRequest> {
        val localVariableBody = repositoryCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/repositories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get all repositories
     * Retrieves all repositories
     * @return kotlin.collections.List<Repository>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAllRepositories() : kotlin.collections.List<Repository> = withContext(Dispatchers.IO) {
        val localVarResponse = getAllRepositoriesWithHttpInfo()

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Repository>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all repositories
     * Retrieves all repositories
     * @return ApiResponse<kotlin.collections.List<Repository>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAllRepositoriesWithHttpInfo() : ApiResponse<kotlin.collections.List<Repository>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAllRepositoriesRequestConfig()

        return@withContext request<Unit, kotlin.collections.List<Repository>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllRepositories
     *
     * @return RequestConfig
     */
    fun getAllRepositoriesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/repositories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
