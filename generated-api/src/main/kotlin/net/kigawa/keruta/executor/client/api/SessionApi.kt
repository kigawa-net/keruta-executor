/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.kigawa.keruta.executor.client.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import net.kigawa.keruta.executor.client.model.Session
import net.kigawa.keruta.executor.client.model.SessionCreateRequest
import net.kigawa.keruta.executor.client.model.SessionUpdateRequest

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import net.kigawa.keruta.executor.client.infrastructure.ApiClient
import net.kigawa.keruta.executor.client.infrastructure.ApiResponse
import net.kigawa.keruta.executor.client.infrastructure.ClientException
import net.kigawa.keruta.executor.client.infrastructure.ClientError
import net.kigawa.keruta.executor.client.infrastructure.ServerException
import net.kigawa.keruta.executor.client.infrastructure.ServerError
import net.kigawa.keruta.executor.client.infrastructure.MultiValueMap
import net.kigawa.keruta.executor.client.infrastructure.PartConfig
import net.kigawa.keruta.executor.client.infrastructure.RequestConfig
import net.kigawa.keruta.executor.client.infrastructure.RequestMethod
import net.kigawa.keruta.executor.client.infrastructure.ResponseType
import net.kigawa.keruta.executor.client.infrastructure.Success
import net.kigawa.keruta.executor.client.infrastructure.toMultiValue

class SessionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080")
        }
    }

    /**
     * Create a new session
     * Creates a new session in the system
     * @param sessionCreateRequest 
     * @return Session
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createSession(sessionCreateRequest: SessionCreateRequest) : Session = withContext(Dispatchers.IO) {
        val localVarResponse = createSessionWithHttpInfo(sessionCreateRequest = sessionCreateRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Session
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new session
     * Creates a new session in the system
     * @param sessionCreateRequest 
     * @return ApiResponse<Session?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createSessionWithHttpInfo(sessionCreateRequest: SessionCreateRequest) : ApiResponse<Session?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createSessionRequestConfig(sessionCreateRequest = sessionCreateRequest)

        return@withContext request<SessionCreateRequest, Session>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createSession
     *
     * @param sessionCreateRequest 
     * @return RequestConfig
     */
    fun createSessionRequestConfig(sessionCreateRequest: SessionCreateRequest) : RequestConfig<SessionCreateRequest> {
        val localVariableBody = sessionCreateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Delete session
     * Deletes a specific session
     * @param sessionId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteSession(sessionId: kotlin.String) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = deleteSessionWithHttpInfo(sessionId = sessionId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete session
     * Deletes a specific session
     * @param sessionId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun deleteSessionWithHttpInfo(sessionId: kotlin.String) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = deleteSessionRequestConfig(sessionId = sessionId)

        return@withContext request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteSession
     *
     * @param sessionId 
     * @return RequestConfig
     */
    fun deleteSessionRequestConfig(sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v1/sessions/{sessionId}".replace("{"+"sessionId"+"}", encodeURIComponent(sessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get all sessions
     * Retrieves all sessions in the system
     * @return kotlin.collections.List<Session>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAllSessions() : kotlin.collections.List<Session> = withContext(Dispatchers.IO) {
        val localVarResponse = getAllSessionsWithHttpInfo()

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Session>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all sessions
     * Retrieves all sessions in the system
     * @return ApiResponse<kotlin.collections.List<Session>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getAllSessionsWithHttpInfo() : ApiResponse<kotlin.collections.List<Session>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getAllSessionsRequestConfig()

        return@withContext request<Unit, kotlin.collections.List<Session>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllSessions
     *
     * @return RequestConfig
     */
    fun getAllSessionsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/sessions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get session by ID
     * Retrieves a specific session by its ID
     * @param sessionId 
     * @return Session
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getSessionById(sessionId: kotlin.String) : Session = withContext(Dispatchers.IO) {
        val localVarResponse = getSessionByIdWithHttpInfo(sessionId = sessionId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Session
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get session by ID
     * Retrieves a specific session by its ID
     * @param sessionId 
     * @return ApiResponse<Session?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun getSessionByIdWithHttpInfo(sessionId: kotlin.String) : ApiResponse<Session?> = withContext(Dispatchers.IO) {
        val localVariableConfig = getSessionByIdRequestConfig(sessionId = sessionId)

        return@withContext request<Unit, Session>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSessionById
     *
     * @param sessionId 
     * @return RequestConfig
     */
    fun getSessionByIdRequestConfig(sessionId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/sessions/{sessionId}".replace("{"+"sessionId"+"}", encodeURIComponent(sessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update session
     * Updates an existing session
     * @param sessionId 
     * @param sessionUpdateRequest 
     * @return Session
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun updateSession(sessionId: kotlin.String, sessionUpdateRequest: SessionUpdateRequest) : Session = withContext(Dispatchers.IO) {
        val localVarResponse = updateSessionWithHttpInfo(sessionId = sessionId, sessionUpdateRequest = sessionUpdateRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Session
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update session
     * Updates an existing session
     * @param sessionId 
     * @param sessionUpdateRequest 
     * @return ApiResponse<Session?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun updateSessionWithHttpInfo(sessionId: kotlin.String, sessionUpdateRequest: SessionUpdateRequest) : ApiResponse<Session?> = withContext(Dispatchers.IO) {
        val localVariableConfig = updateSessionRequestConfig(sessionId = sessionId, sessionUpdateRequest = sessionUpdateRequest)

        return@withContext request<SessionUpdateRequest, Session>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSession
     *
     * @param sessionId 
     * @param sessionUpdateRequest 
     * @return RequestConfig
     */
    fun updateSessionRequestConfig(sessionId: kotlin.String, sessionUpdateRequest: SessionUpdateRequest) : RequestConfig<SessionUpdateRequest> {
        val localVariableBody = sessionUpdateRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v1/sessions/{sessionId}".replace("{"+"sessionId"+"}", encodeURIComponent(sessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
